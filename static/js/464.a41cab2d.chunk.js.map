{"version":3,"file":"static/js/464.a41cab2d.chunk.js","mappings":"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","sources":["Components/Slideshow.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { useGLTF, Stage, PresentationControls } from \"@react-three/drei\";\n\n// Array of model objects with titles and image URLs\nconst models = [\n  {\n    url: \"/Porsche.glb\",\n    title: \"My dream car is a 911, this is my next car goal.\",\n    image: \"/911-logo.png\",\n  },\n  {\n    url: \"/Tesla.glb\",\n    title: \"I currently drive a Tesla\",\n    image: \"/t-logo.png\",\n  },\n];\n\nfunction Model({ url, ...props }) {\n  const { scene } = useGLTF(url);\n\n  scene.traverse((child) => {\n    if (child.isMesh) {\n      child.castShadow = false;\n      child.receiveShadow = false;\n      if (child.material) {\n        child.material.castShadow = false;\n        child.material.receiveShadow = false;\n      }\n    }\n  });\n\n  return <primitive object={scene} {...props} />;\n}\n\nfunction Slideshow() {\n  const carRef = useRef();\n  const [rotationEnabled, setRotationEnabled] = useState(true);\n  const [rotation, setRotation] = useState([0, Math.PI / 4, 0]);\n  const [currentModelIndex, setCurrentModelIndex] = useState(0);\n\n  let idleTimeout;\n\n  const resetIdleTimer = () => {\n    clearTimeout(idleTimeout);\n    idleTimeout = setTimeout(() => {\n      setRotationEnabled(true);\n    }, 5000);\n  };\n\n  useEffect(() => {\n    let requestId;\n    let lastTimestamp = 0;\n\n    const updateRotation = (timestamp) => {\n      const elapsedMilliseconds = timestamp - lastTimestamp;\n\n      if (rotationEnabled) {\n        const rotationSpeed = 0.0001; // Adjust rotation speed as needed\n        setRotation((prevRotation) => [\n          prevRotation[0],\n          prevRotation[1] + rotationSpeed * elapsedMilliseconds,\n          prevRotation[2],\n        ]);\n      }\n\n      lastTimestamp = timestamp;\n      requestId = requestAnimationFrame(updateRotation);\n    };\n\n    if (rotationEnabled) {\n      requestId = requestAnimationFrame(updateRotation);\n    }\n\n    // Initial idle timer setup\n    resetIdleTimer();\n\n    return () => {\n      cancelAnimationFrame(requestId);\n      clearTimeout(idleTimeout);\n    };\n  }, [rotationEnabled]);\n\n  const handleNext = () => {\n    setCurrentModelIndex((prevIndex) => (prevIndex + 1) % models.length);\n  };\n\n  const handlePrev = () => {\n    setCurrentModelIndex(\n      (prevIndex) => (prevIndex - 1 + models.length) % models.length\n    );\n  };\n\n  return (\n    <div className=\"centered-slideshow-container\">\n      <div className=\"arrow left-arrow\" onClick={handlePrev}>\n        {\"Back\"}\n      </div>\n      <div className=\"title-container\">\n        {models[currentModelIndex].image && (\n          <img\n            alt={models[currentModelIndex].title}\n            src={models[currentModelIndex].image}\n          />\n        )}\n        <p>{models[currentModelIndex].title}</p>\n      </div>\n      <Canvas\n        dpr={[1, 2]}\n        shadows\n        camera={{ fov: 45 }}\n        style={{\n          position: \"absolute\",\n          width: \"150px\",\n          height: \"150px\",\n        }}\n      >\n        <ambientLight intensity={0.5} />\n        <PresentationControls\n          speed={1.5}\n          global\n          zoom={1}\n          polar={[-0.1, Math.PI / 4]}\n          onPointerDown={() => {\n            setRotationEnabled(true);\n            resetIdleTimer();\n          }}\n          onPointerUp={() => {\n            setRotationEnabled(false);\n          }}\n          onPointerLeave={() => {\n            setRotationEnabled(false);\n          }}\n        >\n          <Stage environment=\"\">\n            <Model\n              scale={0.001}\n              ref={carRef}\n              rotation={rotation}\n              // Use the current model from the array\n              url={models[currentModelIndex].url}\n            />\n          </Stage>\n        </PresentationControls>\n      </Canvas>\n      <div className=\"arrow right-arrow\" onClick={handleNext}>\n        {\"Next\"}\n      </div>\n    </div>\n  );\n}\n\nexport default Slideshow;\n"],"names":["models","url","title","image","Model","_ref","props","scene","useGLTF","traverse","child","isMesh","castShadow","receiveShadow","material","_jsx","object","carRef","useRef","rotationEnabled","setRotationEnabled","useState","rotation","setRotation","Math","PI","currentModelIndex","setCurrentModelIndex","idleTimeout","resetIdleTimer","clearTimeout","setTimeout","useEffect","requestId","lastTimestamp","updateRotation","timestamp","elapsedMilliseconds","rotationSpeed","prevRotation","requestAnimationFrame","cancelAnimationFrame","_jsxs","className","children","onClick","handlePrev","prevIndex","length","alt","src","Canvas","dpr","shadows","camera","fov","style","position","width","height","intensity","PresentationControls","speed","global","zoom","polar","onPointerDown","onPointerUp","onPointerLeave","Stage","environment","scale","ref","handleNext"],"sourceRoot":""}